@{
    ViewData["Title"] = "Index";
}
    <head>
        <meta charset='utf-8' />

        <link href='~/fullcalendar/packages/core/main.css' rel='stylesheet' />
        <link href='~/fullcalendar/packages/daygrid/main.css' rel='stylesheet' />
        <link href='~/css/CalendarView.css' rel='stylesheet' />
        <link href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet">

        <script src='~/fullcalendar/packages/core/main.js'></script>
        <script src='~/fullcalendar/packages/interaction/main.js'></script>
        <script src='~/fullcalendar/packages/daygrid/main.js'></script>
        <script src='~/fullcalendar/packages/moment/main.js'></script>
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"
                integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
                crossorigin="anonymous"></script>
        <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"
                integrity="sha256-T0Vest3yCU7pafRw9r+settMBX6JkKN06dqBnpQ8d30="
                crossorigin="anonymous"></script>

        <script>

            document.addEventListener('DOMContentLoaded', function () {

                var Calendar = FullCalendar.Calendar;
                var Draggable = FullCalendarInteraction.Draggable;
                var calendarEl = document.getElementById('calendar');
                var draggableEl = document.getElementById('external-events');
                var clickedDate;
                var workerRestrictions;

                $.get("/Calendar/GetWorkerRestrictions", function (data, status) {
                    workerRestrictions = JSON.parse(data);
                });

                new Draggable(draggableEl, {
                    itemSelector: '.draggable-element',
                    eventData: function (eventEl) {
                        return {
                            title: eventEl.innerText,
                            overlap: false
                        };
                    }
                });

                var calendar = new Calendar(calendarEl, {
                    plugins: ['interaction', 'dayGrid'],
                    events:
                    {
                        url: '/Calendar/GetLearningDays',
                        overlap: false
                    },
                    timeZone: 'UTC',
                    droppable: true,
                    eventLimit: true,
                    displayEventTime: false,
                    drop: function (info) {
                        var eventId = info.draggedEl.getAttribute("eventId");
                        var answer = confirm("Assign new learning day on selected time slot?");
                        if (answer) {
                            var data0 = { Id: parseInt(eventId), Title: info.draggedEl.innerText, Start: info.date };
                            var json = JSON.stringify(data0);
                            $.ajax({
                                type: "POST",
                                url: '/Calendar/CreateLearningDay',
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                data: json,
                                success: function (results, responseText) {
                                    console.log("success : " + responseText);
                                    location.reload(true);
                                    return;
                                },
                                error: function (status, error) {
                                    console.log("error : " + status + error);
                                    info.revert();
                                    return;
                                }
                            }).done(function (results) {
                                console.log("done : " + results);
                            });
                        } else {
                            info.revert();
                            return;
                        }
                    },
                    dateClick: function (info) {        // Checking if event can be created on date should be done here as well
                        if (dateAllowed(info.date)) {
                            $("#create-topic-dialog").dialog('open');
                            clickedDate = info.date;
                        }
                    },
                    eventAllow: function (dropInfo, draggedEvent) { // Handles checking if event can be dropped on date
                        return dateAllowed(dropInfo.start);
                    }/*,
                    eventMouseEnter: function (info) {
                        var tooltip = '<div class="tooltip">';
                        tooltip += '<h2>' + info.event.title + '</h2>';
                        $(tooltip).appendTo('body');
                        showTooltip(info);
                    },
                    eventMouseLeave: function (info) {
                        hideTooltip(info);
                    },
                    eventClick: function (info) {
                        info.el.style.borderColor = 'red';
                        debugger;
                        var tooltip = info.el.tooltip({
                            content: info.event.title,
                            track: true
                        });
                        var tooltipElement = document.getElementById('event-tooltip');

                        debugger;
                        info.el.appendChild(tooltipElement);
                        tooltip.tooltip('toggle');
                    }*/
                });

                function validateForm() {
                    var x = document.forms["topicForm"]["topic-name"].value;
                    if (x == "") {
                        $("#validation-dialog").dialog('open');
                        return false;
                    }
                    return true;
                }

                // Necessary to load dialog from jquery-ui
                $.noConflict();
                $(function () {
                    $("#create-topic-dialog").dialog({
                        autoOpen: false,
                        draggable: false,
                        resizable: false,
                        buttons: [
                            {
                                text: "Submit",
                                click: function () {
                                    if (!validateForm()) {
                                        return;
                                    }
                                    $("#confirm-dialog").dialog('open');
                                }
                            }
                        ]
                    });
                });

                $(function () {
                    $("#validation-dialog").dialog({
                        closeOnEscape: false,
                        autoOpen: false,
                        draggable: false,
                        resizable: false,
                        buttons: [
                            {
                                text: "OK",
                                click: function () {
                                    $(this).dialog("close");
                                }
                            }
                        ]
                    });
                });

                $(function () {
                    $("#confirm-dialog").dialog({
                        closeOnEscape: false,
                        autoOpen: false,
                        resizable: false,
                        dialogClass: "no-close",
                        buttons: [
                            {
                                text: "Confirm",
                                click: function () {
                                    var topicName = document.forms["topicForm"]["topic-name"].value;
                                    var topicDescription = document.forms["topicForm"]["topic-description"].value;

                                    var data0 = { TopicName: topicName, TopicDescription: topicDescription, Start: clickedDate };
                                    var json = JSON.stringify(data0);
                                    debugger;
                                    $.ajax({
                                        type: "POST",
                                        url: '/Calendar/CreateLearningDayAndTopic',
                                        contentType: "application/json; charset=utf-8",
                                        dataType: "json",
                                        data: json,
                                        success: function (results, responseText) {
                                            console.log("success : " + responseText);
                                            $('#calendar').html(res).delay(1000);
                                            return;
                                        },
                                        error: function (status, error) {
                                            console.log("error : " + status + error);
                                            return;
                                        }
                                    }).done(function (results) {
                                        console.log("done : " + results);
                                    });

                                    $("#topic-name").value = "";
                                    $("topic-description").value = "";
                                    $(this).dialog("close");
                                    $("#create-topic-dialog").dialog('close');
                                    location.reload(true);
                                }
                            },
                            {
                                text: "Cancel",
                                click: function () {
                                    $(this).dialog("close");
                                }
                            }
                        ]
                    });
                });

                // Returns quarter (1, 2, 3, 4) of the specified date
                function getQuarter(date) {
                    var month = date.getMonth() + 1;
                    return (Math.ceil(month / 3));
                }

                // Returns number of events in specified quarter
                function getQuarterEvents(quarter, events) {
                    var quarterEvents = 0;
                    events.forEach(function (item, index) {
                        var q = getQuarter(item.start);
                        if (q == quarter)
                            quarterEvents++;
                    });
                    return quarterEvents;
                }

                // Returns number of events in specified year
                function getEventsByYear(year) {
                    var yearEvents = calendar.getEvents().filter(function (event) {
                        return event.start.getFullYear() === year;
                    });
                    return yearEvents;
                }

                // Checks date against restrictions
                function dateAllowed(date) {
                    if (date < new Date()) {          // Chosen date must be later than current day
                        return false;
                    }
                    var yearEvents = getEventsByYear(date.getFullYear());
                    var quarter = getQuarter(date);
                    if (getQuarterEvents(quarter, yearEvents) >= workerRestrictions.MaxPerQuarter) {    // Is quarter limit reached
                        return false;
                    }
                    debugger;
                    if (yearEvents.length >= workerRestrictions.MaxPerYear) {   // Is year limit reached
                        return false;
                    }
                    return true;
                }

                calendar.render();
            });
        </script>
    </head>

    <body>

        <h1>Education calendar</h1>
        <div id="external-events">
            <p>
                <strong>Suggested topics (goals)</strong>
            </p>
            @{
                var suggestedTopics = ViewBag.SuggestedTopics as ICollection<EducationSystem.Views.ViewModels.EventViewModel>;
                foreach (var item in suggestedTopics)
                {
                    <div class="draggable-element" eventId="@item.Id">@item.Title</div>
                }
            }
        </div>
        <div id="calendar"></div>
        <div id="create-topic-dialog" title="Create new topic">
            <form name="topicForm">
                <fieldset>
                    <input type="text" name="topic-name" id="topic-name" class="text" placeholder="Topic">
                    <input type="text" name="topic-description" id="topic-description" class="text" placeholder="Description">
                </fieldset>
            </form>
            <p class="validateTips">All fields are required</p>
        </div>
        <div id="validation-dialog" title="Topic cannot be empty"></div>
        <div id="confirm-dialog" title="Confirm action">A new topic will be created. This action cannot be undone.</div>
        <div id="event-tooltip"></div>
    </body>

