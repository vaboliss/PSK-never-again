@model IPagedList<EducationSystem.Models.TopicModel>

@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Mvc.Common;

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-action="Create">Create New</a>
</p>
@using (Html.BeginForm())
{
<p>
    @Html.Hidden("SortOrder", (object)ViewBag.NameSortParm)
    @Html.Hidden("EmptySearch", 0)
    Find by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
    <input type="submit" value="Search" />
</p>
}
@ViewBag.CurrentFilter
<table class="table">
    <thead>
        <tr><th>
            </th>
            <th>
                @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
                <tr><td>
                    @if(item.Learned==true){
                        <p>&#9734;</p>
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)

                    </td>
                    <td>
                        @Truncate(item.Description)
                    </td>
                    <td>
                        <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                        <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                        <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>

                        @using (Html.BeginForm(FormMethod.Post))
                        {
                            @Html.Hidden("topicId", item.Id);
                            @Html.Hidden("learned", item.Learned);
                            @if (item.Learned == false)
                            {
                                <input style="color:#f00;border:0px #000 solid;background-color:#fff;" type="submit" value="Learn" />
                            }
                            else
                            {
                                <input style="color:#f00;border:0px #000 solid;background-color:#fff;" type="submit" value="Unlearn" />
                            }
                        }

                    </td>
                </tr>
                <tr>
                </tr>
        }
    </tbody>
</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager((IPagedList)Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), new PagedListRenderOptions
    {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
    })
@functions{
    // This will safely trim your string (regardless if it is null or not)
    public string Truncate(string yourString)
    {
        // If the string isn't null or empty
        if (!String.IsNullOrEmpty(yourString))
        {
            // Return the appropriate string size
            return (yourString.Length <= 50) ? yourString : yourString.Substring(0, 50) + "...";
        }
        else
        {
            // Otherwise return the empty string
            return "";
        }
    }

}
