@model IPagedList<EducationSystem.Models.TopicModel>

@using X.PagedList.Mvc.Core;
@using X.PagedList;
@using X.PagedList.Mvc.Common;

@{
    ViewData["Title"] = "Index";
}
<head>
    <link href='~/css/EducationSystem.css' rel='stylesheet' />
</head>
<h2>Available topics to study</h2>

@using (Html.BeginForm())
{
<div class="topics-header">
    @Html.Hidden("SortOrder", (object)ViewBag.NameSortParm)
    @Html.Hidden("EmptySearch", 0)
    Find topic by name @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
    <input type="submit" value="Search" />
    <div class="add-topic-button">
        <a class="btn btn-primary" asp-action="Create">Add new topic</a>
    </div>
</div>
}
<table class="table">

    <colgroup>
        <col style="width:4%">
        <col style="width:20%">
        <col style="width:30%">
        <col style="width:20%">
    </colgroup>

    <thead>
        <tr>
            <th>
            </th>
            <th>
                @Html.ActionLink("Name", "Index", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().Description)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @if (item.Learned == true)
                    {
                        <p>&#9734;</p>
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)

                </td>
                <td>
                    @Truncate(item.Description)
                </td>
                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Teams" asp-route-id="@item.Id">Teams which learned</a> |
                    @using (Html.BeginForm("Learn", "Topics", FormMethod.Post))
                    {
                        @Html.Hidden("topicId", item.Id);
                        @Html.Hidden("learned", item.Learned);
                        @Html.Hidden("type", "learnUnlearn");
                        @Html.Hidden("place", "index");
                        @if (item.Learned == false)
                        {
                            <input style="color:#f00;border:0px #000 solid;background-color:#fff;" type="submit" value="Learn" />
                        }
                        else
                        {
                            <input style="color:#f00;border:0px #000 solid;background-color:#fff;" type="submit" value="Unlearn" />
                        }
                    }
                    @using (Html.BeginForm("Learn", "Topics", FormMethod.Post))
                    {
                        @Html.Hidden("topicId", item.Id);
                        @Html.Hidden("learned", item.GoalsLearned);
                        @Html.Hidden("type", "goal");
                        @Html.Hidden("place", "index");
                        @if (item.GoalsLearned == false)
                        {
                            <input style="color:#f00;border:0px #000 solid;background-color:#fff;" name="goal" type="submit" value="Set goal" />
                        }
                        else
                        {
                            <input style="color:#f00;border:0px #000 solid;background-color:#fff;" name="goal" type="submit" value="Unset goal" />
                        }
                    }

                </td>
            </tr>
            <tr>
            </tr>
        }
    </tbody>
</table>
<br />
Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

@Html.PagedListPager((IPagedList)Model, page => Url.Action("Index",
    new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }), new PagedListRenderOptions
    {
        LiElementClasses = new string[] { "page-item" },
        PageClasses = new string[] { "page-link" }
    })
@functions{
    public string Truncate(string yourString)
    {
        if (!String.IsNullOrEmpty(yourString))
        {
            return (yourString.Length <= 50) ? yourString : yourString.Substring(0, 50) + "...";
        }
        else
        {
            return "";
        }
    }

}
