@{
    ViewData["Title"] = "Index";
}
<head>
    <meta charset='utf-8' />
    <style>
        .fc-event {
            color: white !important;
        }
    </style>
    <link href='~/fullcalendar/packages/core/main.css' rel='stylesheet' />
    <link href='~/fullcalendar/packages/daygrid/main.css' rel='stylesheet' />
    <link href='~/css/CalendarView.css' rel='stylesheet' />
    <link href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css" rel="stylesheet">

    <script src='~/fullcalendar/packages/core/main.js'></script>
    <script src='~/fullcalendar/packages/interaction/main.js'></script>
    <script src='~/fullcalendar/packages/daygrid/main.js'></script>
    <script src='~/fullcalendar/packages/moment/main.min.js'></script>
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
            integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0="
            crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"
            integrity="sha256-T0Vest3yCU7pafRw9r+settMBX6JkKN06dqBnpQ8d30="
            crossorigin="anonymous"></script>

    <script>

            document.addEventListener('DOMContentLoaded', function () {

                const dateViolation = "Chosen date must be later than current day";
                const monthLimitViolation = "Month limit reached";
                const quarterLimitViolation = "Quarter limit reached";
                const yearLimitViolation = "Year limit reached";
                const monthName = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

                var Calendar = FullCalendar.Calendar;
                var Draggable = FullCalendarInteraction.Draggable;
                var calendarEl = document.getElementById('calendar');
                var draggableEl = document.getElementById('external-events');
                var clickedDate;
                var selectedDayId;
                var workerRestrictions;

                $.get("/Calendar/GetWorkerRestrictions", function (data, status) {
                    workerRestrictions = JSON.parse(data);
                });

                new Draggable(draggableEl, {
                    itemSelector: '.draggable-element',
                    eventData: function (eventEl) {
                        return {
                            title: eventEl.innerText,
                            overlap: false,
                            create: false
                        };
                    }
                });

                var calendar = new Calendar(calendarEl, {
                    plugins: ['interaction', 'dayGrid'],
                    events:
                    {
                        url: '/Calendar/GetLearningDays',
                        overlap: false
                    },
                    timeZone: 'UTC',
                    droppable: true,
                    eventLimit: true,
                    displayEventTime: false,
                    drop: function (info) {
                        if (!dateAllowed(info.date))
                            return;
                        var eventId = info.draggedEl.getAttribute("eventId");
                        var answer = confirm("Assign new learning day on selected time slot?");
                        if (answer) {
                            var data0 = { Id: parseInt(eventId), Title: info.draggedEl.innerText, Start: info.date };
                            var json = JSON.stringify(data0);
                            $.ajax({
                                type: "POST",
                                url: '/Calendar/CreateLearningDay',
                                contentType: "application/json; charset=utf-8",
                                dataType: "json",
                                data: json,
                                success: function (results, responseText) {
                                    calendar.refetchEvents();
                                    return;
                                },
                                error: function (status, error) {
                                    info.revert();
                                    return;
                                }
                            }).done(function (results) {
                                console.log("done : " + results);
                            });
                        } else {
                            info.revert();
                            return;
                        }
                    },
                    dateClick: function (info) {        // Checking if event can be created on date should be done here as well
                        if (dateAllowed(info.date)) {
                            $("#create-topic-dialog").dialog('open');
                            clickedDate = info.date;
                        }
                    },
                    eventAllow: function (dropInfo) { // Handles checking if event can be dropped on date (only if DraggableEl has eventData Create:true)
                        return dateAllowed(dropInfo.start);
                    },
                    eventClick: function (info) {
                        showDayInfo();
                        var data0 = { TopicName: info.event.title, Start: info.event.start };
                        var json = JSON.stringify(data0);
                        $.ajax({
                            type: "POST",
                            url: '/Calendar/GetDayInfo',
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                            data: json,
                            success: function (data, responseText) {
                                dayInfo = JSON.parse(data);
                                displayDayInfo(dayInfo);
                                selectedDayId = dayInfo.Id;
                                return;
                            }
                        });
                    }
                });

                function validateForm() {
                    var x = document.forms["topicForm"]["topic-name"].value;
                    if (x == "") {
                        $("#validation-dialog").dialog('open');
                        return false;
                    }
                    return true;
                }

                // Necessary to load dialog from jquery-ui
                $.noConflict();
                $(function () {
                    $("#create-topic-dialog").dialog({
                        autoOpen: false,
                        draggable: false,
                        resizable: false,
                        buttons: [
                            {
                                text: "Submit",
                                click: function () {
                                    if (!validateForm()) {
                                        return;
                                    }
                                    $("#confirm-dialog").dialog('open');
                                }
                            }
                        ]
                    });
                });

                $(function () {
                    $("#validation-dialog").dialog({
                        closeOnEscape: false,
                        autoOpen: false,
                        draggable: false,
                        resizable: false,
                        buttons: [
                            {
                                text: "OK",
                                click: function () {
                                    $(this).dialog("close");
                                }
                            }
                        ]
                    });
                });

                $(function () {
                    $("#confirm-dialog").dialog({
                        closeOnEscape: false,
                        autoOpen: false,
                        resizable: false,
                        dialogClass: "no-close",
                        buttons: [
                            {
                                text: "Confirm",
                                click: function () {
                                    var topicName = document.forms["topicForm"]["topic-name"].value;
                                    var topicDescription = document.forms["topicForm"]["topic-description"].value;

                                    var data0 = { TopicName: topicName, TopicDescription: topicDescription, Start: clickedDate };
                                    var json = JSON.stringify(data0);
                                    $.ajax({
                                        type: "POST",
                                        url: '/Calendar/CreateLearningDayAndTopic',
                                        contentType: "application/json; charset=utf-8",
                                        dataType: "json",
                                        data: json,
                                        success: function (results, responseText) {
                                            console.log("success : " + responseText);
                                            $('#calendar').html(res).delay(1000);
                                            return;
                                        },
                                        error: function (status, error) {
                                            console.log("error : " + status + error);
                                            return;
                                        }
                                    }).done(function (results) {
                                        console.log("done : " + results);
                                    });

                                    $("#topic-name").value = "";
                                    $("topic-description").value = "";
                                    $(this).dialog("close");
                                    $("#create-topic-dialog").dialog('close');
                                    location.reload(true);
                                }
                            },
                            {
                                text: "Cancel",
                                click: function () {
                                    $(this).dialog("close");
                                }
                            }
                        ]
                    });
                });

                // Returns quarter (1, 2, 3, 4) of the specified date
                function getQuarter(date) {
                    var month = date.getMonth() + 1;
                    return (Math.ceil(month / 3));
                }

                // Returns number of events in specified month
                function getMonthEvents(month, events) {
                    var monthEvents = 0;
                    events.forEach(function (item, index) {
                        var m = item.start.getMonth();
                        if (m == month)
                            monthEvents++;
                    });
                    return monthEvents;
                }

                // Returns number of events in specified quarter
                function getQuarterEvents(quarter, events) {
                    var quarterEvents = 0;
                    events.forEach(function (item, index) {
                        var q = getQuarter(item.start);
                        if (q == quarter)
                            quarterEvents++;
                    });
                    return quarterEvents;
                }

                // Returns number of events in specified year
                function getEventsByYear(year) {
                    var yearEvents = calendar.getEvents().filter(function (event) {
                        return event.start.getFullYear() === year;
                    });
                    return yearEvents;
                }

                // Checks date against restrictions
                function dateAllowed(date) {
                    if (date < new Date()) {          // Chosen date must be later than current day
                        document.getElementById("restriction-warning-container").style.display = "block";
                        document.getElementById("violated-restriction").innerText = dateViolation;
                        return false;
                    }
                    var yearEvents = getEventsByYear(date.getFullYear());
                    if (getMonthEvents(date.getMonth(), yearEvents) >= workerRestrictions.MaxPerMonth) {    // Is month limit reached
                        document.getElementById("restriction-warning-container").style.display = "block";
                        document.getElementById("violated-restriction").innerText = monthLimitViolation + " for " + monthName[date.getMonth()] + " " + date.getFullYear();
                        return false;
                    }
                    var quarter = getQuarter(date);
                    if (getQuarterEvents(quarter, yearEvents) >= workerRestrictions.MaxPerQuarter) {    // Is quarter limit reached
                        document.getElementById("restriction-warning-container").style.display = "block";
                        document.getElementById("violated-restriction").innerText = date.getFullYear() + " Q" + quarter + " " + quarterLimitViolation;
                        return false;
                    }
                    if (yearEvents.length >= workerRestrictions.MaxPerYear) {   // Is year limit reached
                        document.getElementById("restriction-warning-container").style.display = "block";
                        document.getElementById("violated-restriction").innerText = date.getFullYear() + " " + yearLimitViolation;
                        return false;
                    }
                    hideRestriction();
                    return true;
                }

                function hideDayInfo() {
                    clearDayInfo();
                    document.getElementById("calendar-sidebar-right").style.display = "none";
                }

                document.getElementById("hide-day-info-button").onclick = hideDayInfo;
                document.getElementById("update-comments-button").onclick = updateDayComments;
                document.getElementById("delete-event-button").onclick = deleteEvent;

                // DELETE request for deleting learning days
                function deleteEvent() {
                    var data0 = { Id: selectedDayId };
                    var json = JSON.stringify(data0);
                    $.ajax({
                        type: "DELETE",
                        url: '/Calendar/DeleteLearningDay',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: json,
                        success: function () {
                            hideDayInfo();
                            calendar.refetchEvents();
                            return;
                        }
                    });
                }

                // PUT request for updating day comments
                function updateDayComments() {
                    var comments = document.getElementById("info-comments").value;
                    if (comments == "")
                        return;
                    var data0 = { Comments: comments, Id: selectedDayId };
                    var json = JSON.stringify(data0);
                    $.ajax({
                        type: "PUT",
                        url: '/Calendar/UpdateComments',
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        data: json,
                        success: function () {
                            hideDayInfo();
                            calendar.refetchEvents();
                            return;
                        }
                    });
                }

                function showDayInfo() {
                    document.getElementById("calendar-sidebar-right").style.display = "block";
                }

                function displayDayInfo(dayInfo) {
                    document.getElementById("calendar-sidebar-right").style.display = "block";
                    document.getElementById("info-topic-name").innerText = dayInfo.TopicName;
                    document.getElementById("info-employee").innerText = dayInfo.Title;
                    document.getElementById("info-comments").value = dayInfo.Comments;

                }

                function clearDayInfo() {
                    document.getElementById("info-topic-name").innerText = "";
                    document.getElementById("info-employee").innerText = "";
                    document.getElementById("info-comments").value = "";
                }

                document.getElementById('calendar').addEventListener('mouseleave', e => {
                    document.getElementById("restriction-warning-container").style.display = "none";
                    document.getElementById("violated-restriction").innerText = "";
                });

                function hideRestriction() {
                    document.getElementById("restriction-warning-container").style.display = "none";
                    document.getElementById("violated-restriction").innerText = "";
                }

                calendar.render();

            });
    </script>
</head>

<body>
    <h1>Education calendar</h1>
    <div id="calendar-container">
        <div id="calendar-sidebar">
            <div class="subordinates-list">
                <select class="form-control" asp-items="ViewBag.Subordinates" name="WorkerId"></select>
            </div>
            <div id="external-events">
                <div class="external-events-header">
                    <div class="external-event-title">
                        <p>
                            <strong>Suggested topics</strong>
                        </p>
                    </div>
                </div>
                <div class="events-list">
                    @{
                        var suggestedTopics = ViewBag.SuggestedTopics as ICollection<EducationSystem.Views.ViewModels.EventViewModel>;
                        foreach (var item in suggestedTopics)
                        {
                            <div class="draggable-element" eventId="@item.Id">@item.Title</div>
                        }
                    }
                </div>
                <div class="instructions">
                    <p>
                        Create a new topic by clicking on a date
                    </p>
                </div>
            </div>
            <div id="restriction-warning-container">
                <strong id="restriction-warning">Restricted</strong>
                <p id="violated-restriction">
                </p>
            </div>
        </div>
        <div id="calendar"></div>
        <div id="calendar-sidebar-right">
            <div id="day-info">
                <button id="hide-day-info-button" type="button" class="close" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
                <div class="day-info-header">
                    <div class="day-info-title">
                        <p>
                            <strong>Day information</strong>
                        </p>
                    </div>
                </div>
                <div class="day-info-text">
                    <strong>Employee</strong>
                    <p id="info-employee"></p>
                    <strong>Topic</strong>
                    <p id="info-topic-name"></p>
                    <strong>Comments</strong>
                    <textarea id="info-comments" placeholder="Additional comments"></textarea>
                    <div class="info-buttons">
                        <button id="update-comments-button" type="button" class="btn btn-primary update-comments-button">Update</button>
                        <button id="delete-event-button" type="button" class="btn btn-primary delete-event-button">Delete</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div id="create-topic-dialog" title="Create new topic">
        <form name="topicForm">
            <fieldset>
                <input type="text" name="topic-name" id="topic-name" class="text" placeholder="Topic">
                <input type="text" name="topic-description" id="topic-description" class="text" placeholder="Description">
            </fieldset>
        </form>
        <p class="validateTips">All fields are required</p>
    </div>
    <div id="validation-dialog" title="Topic cannot be empty"></div>
    <div id="confirm-dialog" title="Confirm action">A new topic will be created. This action cannot be undone.</div>
    <div id="event-tooltip"></div>
</body>

